#+TITLE: My Doom Configuration
#+AUTHOR: Romario
#+PROPERTY: header-args:emacs-lisp :tangle ./config.el
* Help
- =`load!'= for loading external *.el files relative to this one
- =`use-package!'= for configuring packages
- =`after!'= for running code after a package has loaded
- =`add-load-path!'= for adding directories to the `load-path', relative to
this file. Emacs searches the =`load-path'= when you load packages with `require' or `use-package'.
- =`map!'= for binding new keys
* General
** Basic
:PROPERTIES:
:ID:       b3a5df34-317c-4640-bd39-82748413b3f5
:END:
#+begin_src emacs-lisp
(setq user-full-name "Romario"
      user-mail-address "romario@com"
      display-line-numbers-type nil            ; turn off line number , you can toggle it with <leader>tl
      undo-limit 80000000                         ; Raise undo-limit to 80Mb
      auto-save-default t                         ; Nobody likes to loose work, I certainly don't
      evil-split-window-below t                   ; Switch to            after splitting
      evil-vsplit-window-right t)
;; Show battery mode if on laptop
(unless (equal "Battery Status not available"
               (battery))
  (display-battery-mode 1))
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu) ; hide dashboard shortmen
#+end_src
*** Org Tangle - Auto Generate Config
:PROPERTIES:
:ID:       36533d71-887e-4e00-8286-b61dac569426
:END:
#+begin_src emacs-lisp
(defun mario/tangle-config()
  (when (string-equal (buffer-file-name)
            (expand-file-name "~/.config/doom/config.org"))
            ;; (expand-file-name "~/.config/doom/config.org"))
   (let ((org-confirm-babel-evaluate nil))
     (org-babel-tangle))))
(add-hook 'org-mode-hook (lambda() (add-hook 'after-save-hook #'mario/tangle-config)))
#+end_src
** Themes
:PROPERTIES:
:ID:       34992806-4bdd-4346-8141-c44af28c47dc
:END:
#+begin_src emacs-lisp
(setq doom-theme 'mario-gruvbox
      doom-gruvbox-dark-variant "hard")
#+end_src
** Font
:PROPERTIES:
:ID:       8b1179dc-2b79-4dbe-ad3d-770b0eb883d9
:END:
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "JetBrainsMono Nerd Font Mono" :size 15)
      doom-variable-pitch-font (font-spec :family "ETbb" :size 24)
      doom-big-font (font-spec :family "ETbb" :size 24) ;; used for presentations or streaming
      ;;doom-serif-font (font-spec :family "JetBrainsMono Nerd Font Mono" :size 24))
      )
#+end_src
** Custom Function
*** Browse Dotfiles
:PROPERTIES:
:ID:       fe6b9af6-2fc6-4cda-88b1-f0ec62437c2d
:END:
#+begin_src emacs-lisp
(defun mario/browse-dotfiles ()
  "Browse the files in ~/.dotfiles."
  (interactive)
  (doom-project-browse (expand-file-name "~/.config/")))
#+end_src
***
* Keybinding
:PROPERTIES:
:ID:       e91ee5a8-a693-44ea-8d97-6797d21a1720
:END:
#+begin_src emacs-lisp
(map! :leader
       "h" #'evil-window-left
       "j" #'evil-window-down
       "l" #'evil-window-right
       "v" #'evil-window-vsplit
       "s" #'evil-window-split
       "k" #'evil-window-up
       :nv "/" #'evilnc-comment-operator
       :desc "help" "H" help-map
       "f z" #'mario/browse-dotfiles
      (:prefix ("y" . "yank/copy")
        :desc "org-store-link" "o" #'org-store-link
        :desc "copy-id-from-agenda" "a" #'mario/copy-idlink-to-clipboard)
       "n z" #'mario/switch-to-agenda)
#+end_src
* Org
** Org
*** Configuration
:PROPERTIES:
:ID:       09b334ec-e9bb-4e79-96e3-8ad61101705e
:END:
#+begin_src emacs-lisp
(setq mario/org-agenda-dir (file-truename "~/Documents/Docdump/gtd/")
      mario/org-dir (file-truename "~/Documents/Docdump")
      mario/org-journal-dir (file-truename "~/Documents/Docdump/journals")
      mario/org-roam-dir (file-truename "~/Documents/Docdump"))
(setq org-directory mario/org-dir
      org-ellipsis " ï„‡"
      org-archive-location (concat org-directory ".archive/%s::")
      org-tag-alist '(("@errand" . ?e)
                      ("@office" . ?o)
                      ("@computer" . ?h)
                      ("@home" . ?h)
                      (:newline)
                      ("CANCELLED" . ?c)))
(setq org-log-done 'time
     ;; org-log-into-drawer t
      )
(with-eval-after-load 'flycheck
  (flycheck-add-mode 'proselint 'org-mode))
;;(add-hook! org-mode
;;  (lambda() (add-hook 'after-save-hook #'mario/tangle-config)))
(require 'org-habit)
(after! org
  (map! :leader
        "c" #'org-capture))
(setq org-todo-keywords
      '((sequence "TODO(t)" "PROJ(p)" "NEXT(n)" "|" "DONE(d)")
        (sequence "PROJ(p)" "|" "HOLD(h@/!)")
        (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)")))
(setq org-todo-keywords-faces
        '(("TODO" :foreground "#008080" :weight normal :italic t)
          ("PROJ" :foreground "#fe8019" :weight normal :italic t)
          ("NEXT" :foreground "#d79221" :weight normal :italic t)
          ("WAITING" :foreground "#32302f" :weight normal :italic t)
          ("DONE" :foreground "#98971a" :weight normal :strike-through t)))
(setq org-structure-template-alist '(("a" . "export ascii")
                                     ("c" . "center")
                                     ("C" . "comment")
                                     ("e" . "example")
                                     ("E" . "export")
                                     ("h" . "export html")
                                     ("l" . "export latex")
                                     ("q" . "quote")
                                     ("s" . "src")
                                     ("v" . "verse")
                                     ("el" . "src emacs-lisp")
                                     ("d" . "definition")
                                     ("t" . "theorem")))
#+end_src
*** Font
:PROPERTIES:
:ID:       ad94d1fb-c9e7-4b37-a66c-75dec098aee7
:END:
#+begin_src emacs-lisp
;; TODO: How to iterate to list ?
(custom-set-faces!
  '(outline-1 :font "ETbb" :height 1.4)
  '(outline-2 :font "ETbb" :height 1.3)
  '(outline-3 :font "ETbb" :height 1.2)
  '(outline-4 :font "ETbb" :height 1.1)
  '(outline-5 :font "ETbb" :height 1.05)
  '(outline-5 :font "ETbb" :height 1.05)
  '(org-document-info :font "ETbb" :slant italic :height 1.3)
  '(org-document-title :font "ETbb" :height 1.6))
#+end_src
*** Another Set faces
:PROPERTIES:
:ID:       e091c617-2199-4e17-94f8-a12c2d23cd6d
:END:
#+begin_src emacs-lisp
    (set-face-attribute 'org-document-info nil
                          :foreground nil
                          :slant 'italic
                          :inherit 'variable-pitch)
     ;; Ensure that anything that should be fixed-pitch in Org files appears that way
     (set-face-attribute 'org-hide nil
                          :inherit 'fixed-pitch)
     (set-face-attribute 'org-block nil
                          :foreground nil
                          :inherit 'fixed-pitch)
     (set-face-attribute 'org-block-begin-line nil
                          :foreground nil
                          :height 0.8
                          :slant 'italic
                          :inherit 'fixed-pitch)
     (set-face-attribute 'org-ellipsis nil
                          :foreground nil
                          :height 1.2
                          :inherit 'fixed-pitch)
     (set-face-attribute 'org-meta-line nil
                          :foreground nil
                          :inherit 'fixed-pitch)

#+end_src
** Roam
*** Roam
:PROPERTIES:
:ID:       1ae2c2f7-4200-4ce8-ab9e-516ea2c25330
:END:
#+begin_src emacs-lisp
(use-package! org-roam
  :init
  (setq org-roam-v2-ack t)
  (map! :leader
        :prefix "n"
        :desc "org-roam" "b" #'org-roam-buffer-toggle
        :desc "org-roam-node-insert" "i" #'org-roam-node-insert
        :desc "org-roam-node-find" "f" #'org-roam-node-find
        :desc "Find file in notes" "F" #'+default/find-in-notes
        :desc "Browse Notes" "C-f" #'+default/browse-notes
        :desc "org-roam-ref-find" "k" #'org-roam-ref-find
        :desc "org-roam-show-graph" "g" #'org-roam-show-graph
        :desc "org-roam-capture" "x" #'org-roam-capture
        :desc "org-roam-dailies-capture-today" "k" #'org-roam-dailies-capture-today)
  (setq org-roam-directory mario/org-roam-dir
        org-roam-dailies-directory "journals/daily"
        org-roam-db-gc-threshold most-positive-fixnum
        org-id-link-to-org-use-id t)
  :config
  (setq org-roam-mode-sections
        (list #'org-roam-backlinks-insert-section
              #'org-oram-reflinks-insert-section
              ;;#'org-roam-unlinked-references-insert-section
              ))
  ;;(set-popup-rules!
  ;;  `((,(regexp-quote org-roam-buffer) ; persistent org-roam buffer
  ;;     :side right :width .33 :height .5 :ttl nil :modeline nil :quit nil :slot 1)
  ;;    ("^\\*org-roam: " ; node dedicated org-roam buffer
  ;;     :side right :width .33 :height .5 :ttl nil :modeline nil :quit nil :slot 2)))
  (org-roam-setup))
#+end_src
*** UI
:PROPERTIES:
:ID:       3fa15bc3-ba97-46cc-95fc-9f0419b29be7
:END:
#+begin_src emacs-lisp
;; Deps org-roam-ui
(use-package! websocket
  :after org-roam)
(use-package! org-roam-ui
  :after org-roam
  :commands (org-roam-ui-mode))
#+end_src
** Agenda
:PROPERTIES:
:ID:       ea53523d-77a5-47ff-b897-19a05f1ba407
:END:
#+begin_src emacs-lisp
;; Org-Agenda
(map! :map org-agenda-mode-map
      :leader
      "m x" #'mario/org-inbox-capture
      "m c I" #'mario/clock-in-and-advance)
(require 'find-lisp)
(setq org-agenda-files
      (append (find-lisp-find-files mario/org-agenda-dir "\.org$")
              (find-lisp-find-files mario/org-journal-dir "\.org$")))
(use-package! org-agenda
  :init
  (map! "<F1>" #'mario/switch-to-agenda)
  (setq org-agenda-block-separator nil
        org-agenda-start-with-log-mode t)
  :config
  (setq org-agenda-custom-commands `((" " "Agenda"
                                     ((agenda ""
                                              ((org-agenda-span 'week)
                                              (org-deadline-warning-days 365)))
                                      (todo "TODO"
                                           ((org-agenda-overriding-header "Inbox")
                                            (org-agenda-files '(,(expand-file-name "inbox.org" mario/org-agenda-dir)))))
                                      (todo "NEXT"
                                           ((org-agenda-overriding-header "In Progress")
                                            (org-agenda-files '(,(expand-file-name "projects.org" mario/org-agenda-dir)))))
                                      (todo "TODO"
                                           ((org-agenda-overriding-header "Active Projects")
                                            (org-agenda-skip-function #'mario/skip-projects)
                                            (org-agenda-files '(,(expand-file-name "projects.org" mario/org-agenda-dir)))))
                                      (todo "TODO"
                                           ((org-agenda-overriding-header "One-off Tasks")
                                            (org-agenda-files '(,(expand-file-name "next.org" mario/org-agenda-dir)))
                                            (org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline 'scheduled)))))))))
#+end_src
** Journal
:PROPERTIES:
:ID:       95d25d03-90f2-4a81-b3ba-4f6310b00fbc
:END:
#+begin_src emacs-lisp
;;(after! org-journal
;;  (setq org-journal-date-prefix "#+TITLE: "
;;        org-journal-file-format "%Y-%m-%d.org"
;;        org-journal-time-format "%I:%M%p"
;;        org-journal-date-format "%A, %d %B %Y"
;;        org-journal-dir mario/org-journal-dir
;;        org-journal-enable-agenda-integration t))
#+end_src
** Pomodoro
** Custom function
*** inbox-capture
:PROPERTIES:
:ID:       aeb399ac-ded1-4db7-afaa-e0edc547f8e5
:END:
#+begin_src emacs-lisp
(defun mario/org-inbox-capture ()
  (interactive)
  "Capture a task in agenda mode."
  (org-capture nil "i"))
#+end_src
*** Advance TODO
:PROPERTIES:
:ID:       5b77bcc0-0b1a-4715-a564-e9939f7ad160
:END:
#+begin_src emacs-lisp
(defun mario/advance-todo ()
  ;;(org-todo 'right)
  (org-todo "NEXT")
  (remove-hook 'org-clock-in-hook #'mario/advance-todo))
#+end_src
*** Clock in and advance
:PROPERTIES:
:ID:       fcd173bd-f8dc-4e72-806f-025e19fccc5b
:END:
#+begin_src emacs-lisp
(defun mario/clock-in-and-advance ()
  (interactive)
  (add-hook 'org-clock-in-hook 'mario/advance-todo)
  (org-agenda-clock-in))
#+end_src
*** Org Hide Properties
:PROPERTIES:
:ID:       49325209-045f-4e0d-aa76-5c36d4ca2116
:END:
#+begin_src emacs-lisp
(defun org-hide-properties ()
  "Hide all org-mode headline property drawers in buffer. Could be slow if it has a lot of overlays."
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward
            "^ *:properties:\n\\( *:.+?:.*\n\\)+ *:end:\n" nil t)
      (let ((ov_this (make-overlay (match-beginning 0) (match-end 0))))
        (overlay-put ov_this 'display "")
        (overlay-put ov_this 'hidden-prop-drawer t))))
  (put 'org-toggle-properties-hide-state 'state 'hidden))

#+end_src
*** Org Show Properties
:PROPERTIES:
:ID:       4602b7d2-b670-4184-806a-628c1ba89b81
:END:
#+begin_src emacs-lisp
(defun org-show-properties ()
  "Show all org-mode property drawers hidden by org-hide-properties."
  (interactive)
  (remove-overlays (point-min) (point-max) 'hidden-prop-drawer t)
  (put 'org-toggle-properties-hide-state 'state 'shown))
#+end_src
*** Org Toggle Properties
:PROPERTIES:
:ID:       7e121b78-fc14-4a48-baa3-da47240847c0
:END:
#+begin_src emacs-lisp
(defun org-toggle-properties ()
  "Toggle visibility of property drawers."
  (interactive)
  (if (eq (get 'org-toggle-properties-hide-state 'state) 'hidden)
      (org-show-properties)
    (org-hide-properties)))
#+end_src
*** Copy idlink to clipboard
:PROPERTIES:
:ID:       d0e78e4a-b158-4b83-898d-88a2d6a22a15
:END:
#+begin_src emacs-lisp
(defun mario/copy-idlink-to-clipboard()
       (interactive)
       (when (eq major-mode 'org-agenda-mode) ;switch to orgmode
     (org-agenda-show)
     (org-agenda-goto))
       (when (eq major-mode 'org-mode) ; do this only in org-mode buffers
     (setq mytmphead (nth 4 (org-heading-components)))
         (setq mytmpid (funcall 'org-id-get-create))
     (setq mytmplink (format "[[id:%s][%s]]" mytmpid mytmphead))
     (kill-new mytmplink)
     (message "Copied %s to killring (clipboard)" mytmplink)))

#+end_src
*** Switch to agenda
:PROPERTIES:
:ID:       8fb41583-b784-4181-be73-1f1a074d037b
:END:
#+begin_src emacs-lisp
(defun mario/switch-to-agenda()
  (interactive)
  (org-agenda nil " "))
#+end_src
*** is project p
:PROPERTIES:
:ID:       f5760a07-7b88-42bc-b744-41314d5f09ba
:END:
#+begin_src emacs-lisp
  (defun mario/is-project-p()
    "Any Task with todo keyword subtask"
    (save-restriction
      (widen)
      (let ((has-subtask)
            (subtree-end (save-excursion (org-end-of-subtree t)))
            (is-a-task (member (nth 2(org-heading-components)) org-todo-keywords-1)))
          (save-excursion
            (forward-line 1)
            (while (and (not has-subtask)
                        (< (point) subtree-end)
                        (re-search-forward "^\*+ " subtree-end t))
              (when (member (org-get-todo-state) org-todo-keywords-1)
                (setq has-subtask t))))
          (and is-a-task has-subtask))))
#+end_src
*** skip project
:PROPERTIES:
:ID:       52b44427-807b-47a5-9e6b-1b856030ebb0
:END:
#+begin_src emacs-lisp
  (defun mario/skip-projects ()
  "Skip trees that are projects"
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (cond
       ((org-is-habit-p)
        next-headline)
       ((mario/is-project-p)
        next-headline)
       (t
        nil)))))
#+end_src
* Deft
