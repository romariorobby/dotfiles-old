;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Variables Directory
(setq mario/org-agenda-dir (file-truename "~/documents/gtd/")
      mario/org-dir (file-truename "~/documents")
      mario/org-journal-dir (file-truename "~/documents")
      mario/org-roam-dir (file-truename "~/documents"))

;; GENERATING CONIFG
(defun mario/generate-config()
 "Generate README.org"
        (interactive)
    (evil-split-buffer (generate-new-buffer "Untitled"))
    (find-file "~/.config/doom/config.org")
    (save-buffer)
    (evil-goto-first-line)
    (re-search-forward "+PROPERTY:")
    (org-ctrl-c-ctrl-c)
    (org-babel-tangle)
    (find-file "~/.config/doom/config.el"))

;; XDG OPEN
(defun mario/open-in-external-app (&optional @fname)
  "Open the current file or dired marked files in external app.
When called in emacs lisp, if @fname is given, open that.
URL `http://ergoemacs.org/emacs/emacs_dired_open_file_in_ext_apps.html'
Version 2019-11-04 2021-02-16"
  (interactive)
  (let* (
         ($file-list
          (if @fname
              (progn (list @fname))
            (if (string-equal major-mode "dired-mode")
                (dired-get-marked-files)
              (list (buffer-file-name)))))
         ($do-it-p (if (<= (length $file-list) 5)
                       t
                     (y-or-n-p "Open more than 5 files? "))))
    (when $do-it-p
      (cond
       ((string-equal system-type "windows-nt")
        (mapc
         (lambda ($fpath)
           (shell-command (concat "PowerShell -Command \"Invoke-Item -LiteralPath\" " "'" (shell-quote-argument (expand-file-name $fpath )) "'")))
         $file-list))
       ((string-equal system-type "darwin")
        (mapc
         (lambda ($fpath)
           (shell-command
            (concat "open " (shell-quote-argument $fpath))))  $file-list))
       ((string-equal system-type "gnu/linux")
        (mapc
         (lambda ($fpath) (let ((process-connection-type nil))
                            (start-process "" nil "xdg-open" $fpath))) $file-list))))))

(defun mario/open-with (arg)
  "Open visited file in default external program.
When in dired mode, open file under the cursor.
With a prefix ARG always prompt for command to use."
  (interactive "P")
  (let* ((current-file-name
          (if (eq major-mode 'dired-mode)
              (dired-get-file-for-visit)
            buffer-file-name))
         (open (pcase system-type
                 (`darwin "open")
                 ((or `gnu `gnu/linux `gnu/kfreebsd) "xdg-open")))
         (program (if (or arg (not open))
                      (read-shell-command "Open current file with: ")
                    open)))
    (call-process program nil 0 nil current-file-name)))
(map! "C-c o o" 'jethro/open-with)

(defun mario/browse-dotfiles ()
  "Browse the files in ~/.dotfiles."
  (interactive)
  (doom-project-browse (expand-file-name "~/.config/")))

;; User Setting
(setq doom-theme 'mario-gruvbox
      doom-gruvbox-dark-variant "hard"
      doom-modeline-height 15
      doom-scratch-initial-major-mode 'org-mode
      doom-font (font-spec :family "monospace" :size 15)
      doom-variable-pitch-font (font-spec :family "monospace" :size 24)
      doom-serif-font (font-spec :family "monospace" :size 24)
      fancy-splash-image (concat doom-private-dir "themes/splash.png"))
(setq user-full-name "Romario"
      user-mail-address "romario@com")
(setq-default major-mode 'org-mode)

(setq display-line-numbers-type nil            ; turn off line number , you can toggle it with <leader>tl
      undo-limit 80000000                         ; Raise undo-limit to 80Mb
      auto-save-default t                         ; Nobody likes to loose work, I certainly don't
      evil-split-window-below t                   ; Switch to            after splitting
      evil-vsplit-window-right t)
;; Show battery mode if on laptop
(unless (equal "Battery Status not available"
               (battery))
  (display-battery-mode 1))
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu) ; hide dashboard shortmen
;;(remove-hook 'doom-first-buffer-hook #'global-hl-line-mode) ; hide highlight line

(map! :nv
      "Z W" #'save-buffer)
;; unmap popup scratch buffer
(map! :leader
      :nv "x" nil)
(map! :leader
       "h" #'evil-window-left
       "j" #'evil-window-down
       "l" #'evil-window-right
       "v" #'evil-window-vsplit
       "s" #'evil-window-split
       "k" #'evil-window-up)

(map! :leader
      :nv "/" #'evilnc-comment-operator
      :desc "help" "H" help-map
        (:prefix-map ("S" . "search"))
         (:prefix ("x" . "org-capture")
          :desc "Popup scratch" "x" #'doom/open-scratch-buffer
          :desc "Org Capture Finalize/Save" "w" #'org-capture-finalize
          :desc "Org Capture Kill" "s" #'org-capture-finalize
          :desc "Org Capture Kill" "c" #'org-capture-kill
          :desc "Org Capture Kill" "d" #'org-capture-kill
          :desc "Org Capture Refile" "r" #'org-capture-refile))

(map! :leader
       "f z" #'org-ctrl-c-ctrl-c
       "f ." #'mario/browse-dotfiles
       "f t" #'mario/find-in-dotfiles
       "f g" #'mario/generate-config
       "f G" #'mario/open-doom-config
      (:prefix ("y" . "yank/copy")
        :desc "org-store-link" "o" #'org-store-link
        :desc "copy-id-from-agenda" "a" #'mario/copy-idlink-to-clipboard )
        (:prefix-map ("b" . "buffer")
         :desc "Switch buffer"           "/" #'switch-to-buffer))
(map! :leader
      "o x" #'mario/open-in-external-app
      "n z" #'mario/switch-to-agenda)

;; ORG
(setq org-directory mario/org-dir
      org-hide-emphasis-markers t ;; hide text like /italic/ slash
      org-ellipsis " â–¾" ;; folding symbol
      ;; org-bullets-bullet-list '(" ") ;; no bullets, needs org-bullets package (not work for me)
      org-archive-location (concat org-directory ".archive/%s::"))

(setq org-tag-alist '(("@errand" . ?e)
                      ("@office" . ?o)
                      ("@home" . ?h)
                      (:newline)
                      ("CANCELLED" . ?c)))
(after! org
  (require 'org-habit)
  (map! :leader
        "c" #'org-capture)
  (setq org-todo-keywords
      '((sequence "TODO(t)" "PROJ(p)" "NEXT(n)" "|" "DONE(d)")
        (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)")))
  (setq org-todo-keyword-faces
        '(("TODO" :foreground "#008080" :weight normal :italic t)
          ("PROJ" :foreground "#fe8019" :weight normal :italic t)
          ("NEXT" :foreground "#d79221" :weight normal :italic t)
          ("WAITING" :foreground "#32302f" :weight normal :italic t)
          ("DONE" :foreground "#98971a" :weight normal :strike-through t))))

(after! org-journal
  (setq org-journal-date-prefix "#+TITLE: "
        org-journal-file-format "%Y-%m-%d.org"
        org-journal-time-format "%I:%M%p"
        org-journal-date-format "%A, %d %B %Y"
        org-journal-dir mario/org-journal-dir
        org-journal-enable-agenda-integration t))

(defun jethro/org-inbox-capture ()
  (interactive)
  "Capture a task in agenda mode."
  (org-capture nil "i"))

(defun mario/org-roam-today-mk-agenda-link ()
  (interactive)
  (let* ((marker (or (org-get-at-bol 'org-marker)
                     (org-agenda-error)))
         (buffer (marker-buffer marker))
         (pos (marker-position marker)))
    (with-current-buffer buffer
      (save-excursion
        (goto-char pos)
        (org-roam-dailies-capture-today)))))

(defun mario/get-daily-agenda (&optional date)
  "Return the agenda for the day as a string."
  (interactive)
  (let ((file (make-temp-file "daily-agenda" nil ".txt")))
    (org-agenda nil "d" nil)
    (when date (org-agenda-goto-date date))
    (org-agenda-write file nil nil "*Org Agenda(d)*")
    (kill-buffer)
    (with-temp-buffer
      (insert-file-contents file)
      (goto-char (point-min))
      (kill-line 2)
      (while (re-search-forward "^  " nil t)
        (replace-match "- " nil nil))
      (buffer-string))))

;; org-agenda
(require 'find-lisp)
(setq org-agenda-files
      (append (find-lisp-find-files mario/org-agenda-dir "\.org$")
              (find-lisp-find-files mario/org-journal-dir "\.org$")))

;; (setq org-agenda-sticky t)
(use-package! org-agenda
  :init
  (map! "<f1>" #'mario/switch-to-agenda)
  (setq org-agenda-block-seperator nil
        org-agenda-start-with-log-mode t)
  (defun mario/switch-to-agenda()
    (interactive)
    (org-agenda nil " "))
  :config
  (defun mario/is-project-p()
    "Any Task with todo keyword subtask"
    (save-restriction
      (widen)
      (let ((has-subtask)
            (subtree-end (save-excursion (org-end-of-subtree t)))
            (is-a-task (member (nth 2(org-heading-components)) org-todo-keywords-1)))
          (save-excursion
            (forward-line 1)
            (while (and (not has-subtask)
                        (< (point) subtree-end)
                        (re-search-forward "^\*+ " subtree-end t))
              (when (member (org-get-todo-state) org-todo-keywords-1)
                (setq has-subtask t))))
          (and is-a-task has-subtask))))

  (defun mario/skip-projects ()
  "Skip trees that are projects"
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (cond
       ((org-is-habit-p)
        next-headline)
       ((mario/is-project-p)
        next-headline)
       (t
        nil)))))
;; idk what it is?
(setq org-columns-default-format "%40ITEM(Task) %Effort(EE){:} %CLOCKSUM(Time Spent) %SCHEDULED(Scheduled) %DEADLINE(Deadline)")
(setq org-agenda-custom-commands `((" " "Agenda"
                                    ((agenda ""
                                             ((org-agenda-span 'week)
                                              (org-deadline-warning-days 365)))
                                     (todo "TODO"
                                           ((org-agenda-overriding-header "Inbox")
                                            (org-agenda-files '(,(expand-file-name "inbox.org" mario/org-agenda-dir)))))
                                     (todo "NEXT"
                                           ((org-agenda-overriding-header "In Progress")
                                            (org-agenda-files '(,(expand-file-name "projects.org" mario/org-agenda-dir)))))
                                     (todo "TODO"
                                           ((org-agenda-overriding-header "Active Projects")
                                            (org-agenda-skip-function #'mario/skip-projects)
                                            (org-agenda-files '(,(expand-file-name "projects.org" mario/org-agenda-dir)))))
                                     (todo "TODO"
                                           ((org-agenda-overriding-header "One-off Tasks")
                                            (org-agenda-files '(,(expand-file-name "next.org" mario/org-agenda-dir)))
                                            (org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline 'scheduled))))))

                                   ;; ("d" "Daily schedule"
                                   ;;  ((agenda ""
                                   ;;           ((org-agenda-span 'day)
                                   ;;            (org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled 'deadline))))
                                     ;; (todo "TODO"
                                     ;;       ((org-agenda-overriding-header "Inbox")
                                     ;;        (org-agenda-files '(,(expand-file-name "inbox.org" mario/org-agenda-dir)))
                                     ;;        (org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled 'deadline))))))
                                   ("h" "Habits"
                                     ((todo "TODO"
                                           ((org-agenda-overriding-header "HABITS")
                                            (org-agenda-files '(,(expand-file-name "habits.org" mario/org-agenda-dir)))))))
                                   ("n" "North"
                                     ((todo "PROJ"
                                           ((org-agenda-overriding-header "ACTIVE PROJECT")
                                            (org-agenda-files '(,(expand-file-name "projects.org" mario/org-agenda-dir)))))
                                      (todo "NEXT"
                                           ((org-agenda-overriding-header "PROJECT TODO INPROGRESS")
                                            (org-agenda-files '(,(expand-file-name "projects.org" mario/org-agenda-dir)))))
                                      (todo "TODO"
                                           ((org-agenda-overriding-header "PROJECT TODO")
                                            (org-agenda-files '(,(expand-file-name "projects.org" mario/org-agenda-dir)))))
                                      (todo "WTM"
                                           ((org-agenda-overriding-header "Weekly Term Goal")
                                            (org-agenda-files '(,(expand-file-name "private/north.org" mario/org-roam-dir)))))
                                      (todo "STM"
                                           ((org-agenda-overriding-header "Short Term Goal")
                                            (org-agenda-files '(,(expand-file-name "private/north.org" mario/org-roam-dir)))))
                                      (todo "MTM"
                                           ((org-agenda-overriding-header "Medium Term Goal")
                                            (org-agenda-files '(,(expand-file-name "private/north.org" mario/org-roam-dir)))))
                                      (todo "LTM"
                                           ((org-agenda-overriding-header "Long Term Goal")
                                            (org-agenda-files '(,(expand-file-name "private/north.org" mario/org-roam-dir))))))))))

(map! :map evil-org-agenda-mode-map
      "c i" #'org-agenda-clock-in
      "c o" #'org-agenda-clock-out
      "c I" #'jethro/clock-in-and-advance
      "i" #'org-agenda-clock-in)
;; See what this function works?
(defun jethro/advance-todo ()
  (org-todo 'right)
  (remove-hook 'org-clock-in-hook #'jethro/advance-todo))

(defun jethro/clock-in-and-advance ()
  (interactive)
  (add-hook 'org-clock-in-hook 'jethro/advance-todo)
  (org-agenda-clock-in))

(setq org-capture-templates
        `(("i" "Inbox" entry (file ,(expand-file-name "inbox.org" mario/org-agenda-dir))
           ,(concat "* TODO %?\n"
                    "/Entered on/ %u"))))
(use-package! md-roam
  :after (org-roam))
(use-package! org-roam
  :init
  (map! :leader
        :prefix "n"
        :desc "Search Notes" "/" #'+default/org-notes-search
        :desc "org-roam linked ref" "r" #'org-roam-buffer-toggle
        ;;:desc "org-roam unlink ref" "R" #'org-roam-unlinked-references
        :desc "org-roam-find-file" "f" #'org-roam-node-find
        :desc "Org Column" "|" #'org-columns
        :desc "Org Column Toggle" "\\" #'org-columns-toggle-or-columns-quit
        :desc "org-find-file" "F" #'+default/find-in-notes
        :desc "org-roam-insert" "i" #'org-roam-node-insert
        :desc "org-roam-server-mode" "s" #'org-roam-server-mode
        :desc "org-roam-switch-to-buffer" "b" #'org-roam-switch-to-buffer
        :desc "org-roam-graph" "g" #'org-roam-graph
        :desc "org-roam-capture" "c" #'org-roam-capture
        :desc "org-roam-dailies-find-yesterday" "h" #'org-roam-dailies-find-yesterday
        :desc "org-roam-dailies-find-today" "j" #'org-roam-dailies-find-today
        :desc "org-roam-dailies-find-date" "k" #'org-roam-dailies-find-date
        :desc "org-roam-dailies-find-tomorrow" "l" #'org-roam-dailies-find-tomorrow
        (:prefix (";" . "journal")
         :desc "New Entry" "j" #'org-journal-new-entry
         :desc "Previous Entry" "h" #'org-journal-previous-entry
         :desc "Next Entry" "l" #'org-journal-next-entry))
  (setq org-roam-directory mario/org-roam-dir
        org-roam-graph-viewer "/usr/bin/brave"
        org-roam-db-gc-threshold most-positive-fixnum
        org-roam-graph-exclude-matcher "private"
        org-roam-tag '(prop last-directory)
        org-roam-v2-ack t
        org-id-link-to-org-use-id t)
  :config
  (setq org-roam-file-extensions '("org" "md"))
  (setq org-roam-mode-sections
        (list #'org-roam-backlink-insert-section
              #'org-roam-reflinks-insert-section
              #'org-roam-unlinked-references-insert-section
              ))
  (org-roam-setup)
  (setq org-roam-capture-templates
        '(("d" "default" plain
           "%?"
           :if-new (file+head "${slug}.org"
                              "#+title: ${title}\n")
           :immediate-finish t
           :unnarrowed t)
          ("p" "private" plain
           "%?"
           :if-new (file+head "${slug}.org"
                              "#+title: ${title}\n")
           :immediate-finish t
           :unnarrowed t)))
  (setq org-roam-capture-ref-templates
        '(("r" "ref" plain
           "%?"
           :if-new (file+head "${slug}"
                              "#+title:${title}\n")
           :unnarrowed t)))
  (setq org-roam-dailies-directory "private/daily/")
  (setq org-roam-dailies-capture-templates
        '(("d" "daily" plain (function org-roam-capture--get-point)
           ""
           :file-name "private/daily/%<%Y-%m-%d>"
           :head "#+TITLE: %<%A, %d %B %Y>
- \n* Time Tracking\n"
           :immediate-finish t)))
  (add-to-list 'org-agenda-custom-commands `("r" "Library"
                                           ((todo "TODO"
                                                  ((org-agenda-overriding-header "Reading List")
                                                   (org-agenda-files '(,(expand-file-name "rwinbox.org" mario/org-roam-dir))))))))
 ;; this use with mario/org-ram-mk-link
    ;; (setq org-roam-dailies-capture-templates
    ;;       (let ((head
    ;;              (concat "#+title: %<%Y-%m-%d (%A)>\n#+startup: showall\n* Daily Overview\n"
    ;;                      "#+begin_src emacs-lisp :results value raw\n"
    ;;                      "(mario/get-daily-agenda \"%<%Y-%m-%d>\")\n"
    ;;                      "#+end_src\n"
;;                         "* [/] Do Today\n* [/] Maybe Do Today\n* Journal\n")))
;;            `(("j" "journal" entry
;;               #'org-roam-capture--get-point
;;               "* %<%H:%M> %?"
;;               :file-name "private/daily/%<%Y-%m-%d>"
;;               :head ,head
;;               :olp ("Journal"))
;;              ("t" "do today" item
;;               #'org-roam-capture--get-point
;;               "[ ] %a"
;;               :file-name "private/daily/%<%Y-%m-%d>"
;;               :head ,head
;;               :olp ("Do Today")
;;               :immediate-finish t)
;;              ("m" "maybe do today" item
;;               #'org-roam-capture--get-point
;;               "[ ] %a"
;;               :file-name "private/daily/%<%Y-%m-%d>"
;;               :head ,head
;;               :olp ("Maybe Do Today")
;;               :immediate-finish t))))
  (set-company-backend! 'org-mode '(company-capf)))

(use-package! org-roam-protocol
  :after org-protocol)
(setq visual-fill-column-width 100
      visual-fill-column-center-text t)
(setq deft-directory mario/org-roam-dir
      deft-use-filename-as-title t
      deft-use-filter-string-for-filename t
      deft-default-extension "org"
      deft-recursive t)
