# vim:ft=zsh
#
fpath=("${ZDOTDIR:-$HOME/.config/zsh}/completions" $fpath)
# Enable colors and change prompt:
autoload -U colors && colors	# Load colors
PS1="%B%{$fg[red]%}[%{$fg[yellow]%}%n%{$fg[green]%}@%{$fg[blue]%}%M %{$fg[magenta]%}%~%{$fg[red]%}]%{$reset_color%}$%b "
setopt autocd		# Automatically cd into typed directory.
stty stop undef		# Disable ctrl-s to freeze terminal.
setopt interactive_comments

# History in cache directory:
HISTSIZE=10000
SAVEHIST=10000
HISTFILE=~/.cache/zsh/history

[ -f "${XDG_CONFIG_HOME:-$HOME/.config}/shell/shortcutrc" ] && source "${XDG_CONFIG_HOME:-$HOME/.config}/shell/shortcutrc"
[ -f "${XDG_CONFIG_HOME:-$HOME/.config}/shell/aliasrc" ] && source "${XDG_CONFIG_HOME:-$HOME/.config}/shell/aliasrc"
[ -f "${XDG_CONFIG_HOME:-$HOME/.config}/shell/zshnameddirrc" ] && source "${XDG_CONFIG_HOME:-$HOME/.config}/shell/zshnameddirrc"

{{- if ne .chezmoi.os "darwin" }}
#MACOS
# TODO: make more simpler
if [[ ! "$PATH" == */usr/local/opt/fzf/bin* ]]; then
  export PATH="${PATH:+${PATH}:}/usr/local/opt/fzf/bin"
fi

# Auto-completion
# ---------------
[[ $- == *i* ]] && source "/usr/local/opt/fzf/shell/completion.zsh" 2> /dev/null

# Key bindings
# ------------
[ -f "/usr/local/opt/fzf/shell/key-bindings.zsh" ] && source "/usr/local/opt/fzf/shell/key-bindings.zsh"

{{ end }}

{{- if ne .chezmoi.os "darwin" }}
# FZF
[ -f /usr/share/fzf/completion.zsh ] && source /usr/share/fzf/completion.zsh
[ -f /usr/share/fzf/key-bindings.zsh ] && source /usr/share/fzf/key-bindings.zsh
# FIXME: custom fzf (deprecated)
#[ -f $HOME/.local/bin/fzf/binding.zsh ] && source $HOME/.local/bin/fzf/binding.zsh
{{ end }}

# Basic auto/tab complete:
autoload -U compinit
zstyle ':completion:*' menu select
zmodload zsh/complist
compinit
_comp_options+=(globdots)		# Include hidden files.

# vi mode
bindkey -v
export KEYTIMEOUT=1

# Use vim keys in tab complete menu:
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history
bindkey -v '^?' backward-delete-char

# Change cursor shape for vi-modes
function zle-keymap-select {
    case $KEYMAP in
        vicmd) echo -ne '\e[1 q';; # block
        viins|main) echo -ne '\e[5 q';; # beam
    esac
}
zle -N zle-keymap-select
zle-line-init() {
    zle -K viins # initiate `vi insert` as keymap (can be removed if `bindkey -V` has been set elsewhere)
    echo -ne "\e[5 q"
}
zle -N zle-line-init
echo -ne '\e[5 q' # Use beam shape cursor on startup.
preexec() { echo -ne '\e[5 q' ;} # Use beam shape cursor for each new prompt.

# Use lf to switch directories and bind it to ctrl-o
lfcd () {
    tmp="$(mktemp)"
    lf -last-dir-path="$tmp" "$@"
    if [ -f "$tmp" ]; then
        dir="$(cat "$tmp")"
        rm -f "$tmp" >/dev/null
        [ -d "$dir" ] && [ "$dir" != "$(pwd)" ] && cd "$dir"
    fi
}

openvim() {
    nvim $(fzf)
}
bindkey -s '^o' 'lfcd\n'
{{- if eq .chezmoi.os "darwin" }}
# MacOS - OPT-f
bindkey -s 'Æ’' 'openvim\n'
{{ else }}
# Linux - ALT-f
bindkey -s '\ef' 'openvim\n'
{{ end }}

#bindkey -s '^a' 'bc -lq\n'

bindkey '^a' backward-word
bindkey '^e' forward-word

bindkey '^[[P' delete-char

# edit line in vim with ctrl-n
autoload edit-command-line; zle -N edit-command-line
bindkey '^n' edit-command-line

{{- if eq .chezmoi.os "darwin" }}
#macOS
[ -d "/usr/local/share/zsh-syntax-highlighting" ] && source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh 2>/dev/null
{{ else }}
# Linux
[ -d "/usr/share/zsh/plugins/fast-syntax-hightlighting" ] && source /usr/share/zsh/plugins/fast-syntax-highlighting/fast-syntax-highlighting.plugin.zsh 2>/dev/null
{{ end }}

#source /usr/share/zsh/plugins/rbw/rbw.zsh 2>/dev/null
#source /usr/lib/zsh-git-prompt/zshrc.sh Bitwarden CLI
[ -f "${XDG_DATA_HOME:-$HOME/.local/share}/bitwarden/key" ] && export BW_MASTER=$(cat ~/.local/share/bitwarden/key)
[ -f "${XDG_DATA_HOME:-$HOME/.local/share}/bitwarden/email" ] && export BW_EMAIL=$(cat ~/.local/share/bitwarden/email)
[ -f "${XDG_DATA_HOME:-$HOME/.local/share}/bitwarden/clientid" ] && export BW_CLIENTID=$(cat ~/.local/share/bitwarden/clientid)
[ -f "${XDG_DATA_HOME:-$HOME/.local/share}/bitwarden/clientsecret" ] && export BW_CLIENTSECRET=$(cat ~/.local/share/bitwarden/clientsecret)
# export BW_SESSION="$(bw login BW_EMAIL $BW_MASTER --raw)"
# export BW_SESSION="$(bw unlock $BW_MASTER 2>/dev/null | grep 'export' | sed -E 's/.*export BW_SESSION="(.*==)"$/\1/')"
#
[ -x "$(command -v "kitty")" ] && kitty + complete setup zsh | source /dev/stdin
