#+TITLE: Emacs Config
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el
* UI 
  #+begin_src emacs-lisp
    (setq-default major-mode 'org-mode) ;; default major mode org-mode
    (setq inhibit-startup-message t)
    (scroll-bar-mode -1) ;; Disable Visual Scrolbar
    (tool-bar-mode -1) ;; Disable toolbar
    (tooltip-mode -1) ;; Disable tooltips
    (menu-bar-mode -1) ;; Disable Menubar
    (column-number-mode)
    (global-display-line-numbers-mode t) ;; Line number
  (dolist (mode '(org-mode-hook
		  term-mode-hook
		  eshell-mode-hook))
    (add-hook-mode (lambda () (display-line-numbers-mode 0))))
    (setq scroll-conservatively 101) ;; value greater than 100 gets rid of half page jumping
    (setq mouse-wheel-scroll-amount '(3 ((shift) . 3))) ;; how many lines at a time
    (setq mouse-wheel-progressive-speed t) ;; accelerate scrolling
    (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
    (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  #+end_src
* Init
  #+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
     (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
  #+end_src
* Var Dir
  #+begin_src emacs-lisp
;; Variables Directory
(setq mario/org-agenda-dir (file-truename "~/documents")
      mario/org-dir (file-truename "~/documents")
      mario/org-journal-dir (file-truename "~/documents")
      mario/org-roam-dir (file-truename "~/documents"))
  #+end_src
* Themes
  #+begin_src emacs-lisp
(add-to-list 'custom-theme-load-path "~/.config/emacs/themes")
(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'mario-gruvbox t)
  ;;(load-theme 'doom-one t)
 ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
  #+end_src
* Font Faces
  #+begin_src emacs-lisp
(set-face-attribute 'default nil :font "JetBrainsMono Nerd Font Mono" :height 100)
  #+end_src
  
* Evil Mode
  #+begin_src emacs-lisp
  (use-package undo-tree)
  (use-package general
   :ensure t 
   :config
   (general-evil-setup t))
  (nvmap :prefix "SPC"
;;    "." '(find-file :which-key "Find-file")
    "SPC" '(counsel-M-x :which-key "M-x")
    "h" '(evil-window-left :which-key "Window Left")
    "j" '(evil-window-down :which-key "Window down")
    "k" '(evil-window-up :which-key "Window up")
    "l" '(evil-window-right :which-key "Window right")
    "s" '(evil-window-split :which-key "Split")
    "v" '(evil-window-vsplit :which-key "Vertical Split")
    "H r" '((lambda() (interactive) (load-file "~/.config/emacs/init.el")) :whichkey "Reload Config")
    "b b" '(ivy-switch-buffer :which-key "Ivy Buffer")
    "b B" '(ibuffer :which-key "Ibuffer")
    "b d" '(kill-current-buffer :which-key "Kill current Buffer")
    "b h" '(previous-buffer :which-key "Previous Buffer")
    "b l" '(next-buffer :which-key "Next Buffer")
    "b c" '(kill-current-buffer :which-key "Kill current Buffer")
    "B l" '(bookmark-jump :which-key "Jump to bookmark")
    "B RET" '(bookmark-jump :which-key "Jump to bookmark")
    "B d" '(bookmark-delete :which-key "Delete Bookmark")
    "t k" '(clm/toggle-command-log-buffer :which-key "Toggle Key log")
    "B a" '(bookmark-set :which-key "Set Bookmark"))
(nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
       "."     '(find-file :which-key "Find file")
       "f e"   '(find-file "~/.config/doom/config.org" :whichkey "Edit emacs config")
       "f f"   '(find-file :which-key "Find file")
       "f r"   '(counsel-recentf :which-key "Recent files")
       "f s"   '(save-buffer :which-key "Save file")
       "f u"   '(sudo-edit-find-file :which-key "Sudo find file")
       "f y"   '(dt/show-and-copy-buffer-path :which-key "Yank file path")
       "f C"   '(copy-file :which-key "Copy file")
       "f D"   '(delete-file :which-key "Delete file")
       "f R"   '(rename-file :which-key "Rename file")
       "f S"   '(write-file :which-key "Save file as...")
       "f U"   '(sudo-edit :which-key "Sudo edit file"))
  (use-package evil
   :ensure t 
   :init
   (setq evil-want-integration t)
   (setq evil-want-keybinding nil)
   (setq evil-vsplit-window-right t)
   (setq evil-split-window-below t)
   (evil-mode))
  (use-package evil-collection
   :after evil
   :ensure t
   :config
   (evil-collection-init))
  #+end_src
* Log key
  #+begin_src emacs-lisp
(use-package command-log-mode)
  #+end_src
* ivy 
** ivy
  #+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :init
    (setq ivy-initial-inputs-alist nil) ;; Remove ^ when pressed SPC-SPC
    :bind (("C-/" . swiper)
	   :map ivy-minibuffer-map
	   ("C-k" . ivy-previous-line)
	   ("C-j" . ivy-next-line)
	   ("TAB" . ivy-alt-done)
	   ("C-l" . ivy-alt-done)
	   :map ivy-switch-buffer-map
	   ("C-k" . ivy-previous-line)
	   ("C-l" . ivy-done)
	   ("C-d" . ivy-switch-buffer-kill)
	   :map ivy-reverse-i-search-map
	   ("C-k" . ivy-previous-line)
	   ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))
  #+end_src
** Ivy Rich
  #+begin_src emacs-lisp
  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))
  #+end_src
* Modeline
  #+begin_src emacs-lisp
(use-package all-the-icons) ;; requirement
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))
  #+end_src
* Which Key
  #+begin_src emacs-lisp
  (use-package counsel)
  (use-package which-key
  :ensure t
  :init (which-key-mode)
  :config
  (setq which-key-idle-delay 0.3))
  #+end_src
* Func  
#+begin_src emacs-lisp
;; GENERATING CONIFG
(defun mario/generate-config()
 "Generate README.org"
        (interactive)
    (evil-split-buffer (generate-new-buffer "Untitled"))
    (find-file "~/.config/emacs/config.org")
    (save-buffer)
    (evil-goto-first-line)
    (re-search-forward "+PROPERTY:")
    (org-ctrl-c-ctrl-c)
    (org-babel-tangle)
    (find-file "~/.config/emacs/init.el"))

#+end_src

* Dashboard
#+begin_src emacs-lisp  
(use-package dashboard
  :init      ;; tweak dashboard config before loading it
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
  (setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
  (setq dashboard-center-content nil) ;; set to 't' for centered content
  (setq dashboard-items '((recents . 5)
                          (agenda . 5 )
                          (bookmarks . 3)
                          (projects . 3)
                          (registers . 3)))
  :config
  (dashboard-setup-startup-hook)
  (dashboard-modify-heading-icons '((recents . "file-text")
			      (bookmarks . "book"))))
#+end_src

* Dired
#+begin_src emacs-lisp  
(use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))
  (use-package dired
     :ensure nil
     :commands (dired dired-jump)
     :bind (("C-x C-j" . dired-jump))
     :custom ((dired-listing-switches "-agho --group-directories-first"))
     :config
     (evil-collection-define-key 'normal 'dired-mode-map
       "h" 'dired-single-up-directory
       "l" 'dired-single-buffer))
  (use-package dired-single
    :commands (dired dired-jump))
#+end_src
* Org
  #+begin_src emacs-lisp
(setq org-directory mario/org-dir)
(setq org-src-preserve-indentation nil
      org-src-tab-acts-natively t
      org-edit-src-content-indentation 0)
  #+end_src
* Org-Roam
#+begin_src emacs-lisp
(use-package org-roam
  :ensure t
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory mario/org-roam-dir)
  :config
  (org-roam-setup))
(nvmap :prefix "SPC"
	"n a" '(org-agenda :whichkey "Org Agenda")
	"n f" '(org-roam-node-find :whichkey "Roam Find")
	"n l" '(org-roam-buffer-toggle :whichkey "Roam Buffer")
	"n c" '(org-roam-capture :whichkey "Roam Capture")
	"n j" '(org-roam-dailies-capture-today :whichkey "Roam Capture"))
#+end_src

* Org-tempo
#+begin_src emacs-lisp
(use-package org-tempo
  :ensure nil)
#+end_src
* Projectile
#+begin_src emacs-lisp
(use-package projectile
  :config
  (projectile-global-mode 1))
(nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
       "."     '(find-file :which-key "Find file")
       "f e"   '(find-file "~/.config/doom/config.org" :whichkey "Edit emacs config")
       "f f"   '(find-file :which-key "Find file"))
#+end_src

* Nav Flash
  #+begin_src emacs-lisp
  (use-package nav-flash)
  (require 'nav-flash)
  (nav-flash-show)
  #+End_src
* Rainbow Delimiters
  #+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
  #+end_src
* Helpful

#+begin_src emacs-lisp
(use-package helpful 
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+end_src
